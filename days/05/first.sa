immutable class POINT < $IS_LT{POINT}, $HASH, $STR is
	include COMPARABLE;

	readonly attr x, y:INT;

	create(xvalue, yvalue:INT):POINT
	-- For this implementation, since our hash is xoring over the values
	-- directly, we're making sure the size of the values is small to reduce
	-- the risk of value collision
	pre xvalue < 65536 and yvalue < 65536
	is
		r:POINT;
		return r.x(xvalue).y(yvalue);
	end;

	is_lt(other: SAME):BOOL is
		return (x = other.x and y < other.y) or (y = other.y and x < other.x);
	end;

	is_eq(other: POINT):BOOL is
		return x = other.x and y = other.y;
	end;

	hash:INT is
		-- A simple hash value computed from the hash values of the
		-- components (taken from stdlib TUP{_, _} implementation).
		return x.bxor(y.lshift(8))
	end;

	str:STR is
		return "(" + x.str + "," + y.str + ")";
	end;
end;


immutable class SEGMENT < $STR is
	readonly attr p1, p2: POINT;

	create(a: POINT):SAME
	-- A segment representing a point
	is
		r: SAME;
		return r.p1(a).p2(a);
	end;

	create(a, b: POINT):SAME
	pre a.x = b.x or a.y = b.y  -- no diagonals permitted
	is
		if a > b then
			t ::= a;
			a := b;
			b := t;
		end;
		r: SAME;
		return r.p1(a).p2(b);
	end;

	points_on_line!:POINT is
		loop
			x ::= p1.x.upto!(p2.x);
			loop
				y ::= p1.y.upto!(p2.y);
				yield #POINT(x, y);
			end;
		end;
	end;

	intersects_at!(other:SAME):POINT is
		points ::= lineSegmentLineSegmentIntersection(other);
		seg: SAME;
		case points.size
		when 0 then quit;
		when 1 then seg := #(points[0]);
		when 2 then seg := #(points[0], points[1]);
		else raise "More than two points returned in line segment intersection";
		end;

		loop
			yield seg.points_on_line!;
		end;
	end;

	-- Finds the orientation of point 'c' relative to the line segment (p1, p2)
	-- Returns  0 if all three points are collinear.
	-- Returns -1 if 'c' is clockwise to segment (p1, p2), i.e right of line formed by the segment.
	-- Returns +1 if 'c' is counter clockwise to segment (p1, p2), i.e left of line
	-- formed by the segment.
	private orientation(c:POINT):INT is
		v ::= (p2.y - p1.y) * (c.x - p2.x) - (p2.x - p1.x) * (c.y - p2.y);
		return -v.min(1).max(-1);
	end;

	-- Tests whether point 'c' is on the line segment (p1, p2).
	-- Ensure first that point c is collinear to segment (p1, p2)
	-- then check whether c is within the rectangle formed by (p1, p2)
	private pointOnLine(c:POINT):BOOL is
		return ((orientation(c) = 0) and
			(p1.x.min(p2.x) <= c.x) and (c.x <= p1.x.max(p2.x)) and
			(p1.y.min(p2.y) <= c.y) and (c.y <= p1.y.max(p2.y))
		);
	end;

	-- Determines whether two segments intersect.
	private segmentsIntersect(other:SEGMENT):BOOL is
		p3::=other.p1;
		p4::=other.p2;
		-- Get the orientation of points p3 and p4 in relation
		-- to the line segment (p1, p2)
		o1 ::= orientation(p3);
		o2 ::= orientation(p4);
		o3 ::= other.orientation(p1);
		o4 ::= other.orientation(p2);

		-- If the points p1, p2 are on opposite sides of the infinite
		-- line formed by (p3, p4) and conversly p3, p4 are on opposite
		-- sides of the infinite line formed by (p1, p2) then there is
		-- an intersection.
		if (o1 /= o2 and o3 /= o4) then return true; end;

		-- Collinear special cases (perhaps these if checks can be simplified?)
		if (o1 = 0 and pointOnLine(p3)) then return true; end;
		if (o2 = 0 and pointOnLine(p4)) then return true; end;
		if (o3 = 0 and other.pointOnLine(p1)) then return true; end;
		if (o4 = 0 and other.pointOnLine(p2)) then return true; end;

		return false;
	end;

	private getCommonEndpoints(other:SEGMENT):LIST{POINT} is
		points ::= #LIST{POINT};

		p3::=other.p1;
		p4::=other.p2;

		if (p1 = p3) then
			points.append(p1);
			if (p2 = p4) then points.append(p2); end;
		else
			if (p1 = p4) then
				points.append(p1);
				if (p2 = p3) then points.append(p2); end;
			else
				if (p2 = p3) then
					points.append(p2);
					if (p1 = p4) then points.append(p1); end;
				else
					if (p2 = p4) then
						points.append(p2);
						if (p1 = p3) then points.append(p1); end;
					end;
				end;
			end;
		end;
		return points;
	end;

	-- Finds the intersection point(s) of two line segments. Unlike regular line
	-- segments, segments which are points (x1 = x2 and y1 = y2) are allowed.
	private lineSegmentLineSegmentIntersection(other:SEGMENT): ARRAY{POINT} is
		-- No intersection.
		if ~segmentsIntersect(other) then return #ARRAY{POINT}; end;

		p3::=other.p1;
		p4::=other.p2;

		-- Both segments are a single point.
		if (p1 = p2 and p2 = p3 and p3 = p4) then
			return |p1|;
		end;

		endpoints ::= getCommonEndpoints(other);
		n ::= endpoints.size;

		-- One of the line segments is an intersecting single point.
		-- NOTE: checking only n = 1 is insufficient to return early
		-- because the solution might be a sub segment.
		singleton ::= ((p1 = p2) or (p3 = p4));
		if (n = 1 and singleton) then return |endpoints[0]|; end;

		-- Segments are equal.
		if (n = 2) then return |endpoints[0], endpoints[1]|; end;

		collinearSegments ::= ((orientation(p3) = 0) and (orientation(p4) = 0));

		-- The intersection will be a sub-segment of the two
		-- segments since they overlap each other.
		if (collinearSegments) then
			-- Segment #2 is enclosed in segment #1
			if (pointOnLine(p3) and pointOnLine(p4)) then
				return |p3, p4|;
			end;

			-- Segment #1 is enclosed in segment #2
			if (other.pointOnLine(p1) and other.pointOnLine(p2)) then
				return |p1, p2|;
			end;

			-- The subsegment is part of segment #1 and part of segment #2.
			-- Find the middle points which correspond to this segment.
			midPoint1, midPoint2: POINT;
			if pointOnLine(p3) then midPoint1 := p3; else midPoint1 := p4; end;
			if other.pointOnLine(p1) then midPoint2 := p1; else midPoint2 := p2; end;

			-- There is actually only one middle point!
			if (midPoint1 = midPoint2) then return |midPoint1|; end;

			return |midPoint1, midPoint2|;
		end;

		-- Beyond this point there is a unique intersection point.

		-- Segment #1 is a vertical line.
		if ((p1.x - p2.x).abs = 0) then
			m ::= (p4.y - p3.y) / (p4.x - p3.x);
			b ::= p3.y - m * p3.x;
			return |#POINT(p1.x, m * p1.x + b)|;
		end;

		-- Segment #2 is a vertical line.
		if ((p3.x - p4.x).abs = 0) then
			m ::= (p2.y - p1.y) / (p2.x - p1.x);
			b ::= p1.y - m * p1.x;
			return |#POINT(p3.x, m * p3.x + b)|;
		end;

		m1 ::= (p2.y - p1.y) / (p2.x - p1.x);
		m2 ::= (p4.y - p3.y) / (p4.x - p3.x);
		b1 ::= p1.y - m1 * p1.x;
		b2 ::= p3.y - m2 * p3.x;
		x ::= (b2 - b1) / (m1 - m2);
		y ::= (m1 * b2 - m2 * b1) / (m1 - m2);

		return |#POINT(x, y)|;
	end;

	str:STR is
		return p1.str + " -> " + p2.str;
	end;
end;


class MAIN is

	load_point(curs:STR_CURSOR):POINT is
		x ::= curs.get_int;
		curs.skip_over(",");
		y ::= curs.get_int;
		return #POINT(x, y);
	end;

	load_segments:LIST{SEGMENT} is
		x, y: INT;
		segments ::= #LIST{SEGMENT};
		loop
			line ::= #IN.get_str;
			until!(#IN.eof);
			curs ::= line.cursor;
			-- get pair, convert to point
			p1 ::= load_point(curs);
			-- skip arrow " -> "
			curs.skip_over(" -> ");
			-- get pair, convert to point
			p2 ::= load_point(curs);
			-- skip diagonals
			if p1.x = p2.x or p1.y = p2.y then
				-- create segment
				s ::= #SEGMENT(p1, p2);
				-- add to list
				segments.append(s);
			end;
		end;
		return segments;
	end;

	main is
		-- load line-segments (class for iteration)
		segments:LIST{SEGMENT} := load_segments;
		-- iterate from first through next-through-last
		intersections ::= #SET{POINT};
		loop
			is1 ::= segments.ind!;
			s1 ::= segments[is1];
			loop
				-- Consider all segments after is1
				is2 ::= (is1 + 1).upto!(segments.size - 1);
				s2 ::= segments[is2];
				-- check all points in lines and yield intersection points (add to set)
				loop
					intersections.insert(s1.intersects_at!(s2));
				end;
			end;
		end;
		#OUT + intersections + "\n\n";
		-- output count of set
		#OUT + intersections.size + "\n";
	end;
end;
